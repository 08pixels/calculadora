
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Nov 11 14:06:40 BRT 2016
//----------------------------------------------------

package calculadora;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Fri Nov 11 14:06:40 BRT 2016
  */
public class JMParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JMParser() {super();}

  /** Constructor which sets the default scanner. */
  public JMParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\013\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\006\000\002\003\006" +
    "\000\002\003\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\010\004\004\005\005\010\007\001\002\000" +
    "\004\010\022\001\002\000\004\010\017\001\002\000\004" +
    "\002\016\001\002\000\014\002\001\004\010\005\012\006" +
    "\014\007\013\001\002\000\010\004\ufffa\005\ufffa\010\ufffa" +
    "\001\002\000\010\004\004\005\005\010\007\001\002\000" +
    "\010\004\ufff9\005\ufff9\010\ufff9\001\002\000\010\004\ufff7" +
    "\005\ufff7\010\ufff7\001\002\000\010\004\ufff8\005\ufff8\010" +
    "\ufff8\001\002\000\004\002\ufffb\001\002\000\004\002\000" +
    "\001\002\000\014\002\ufffe\004\010\005\012\006\014\007" +
    "\013\001\002\000\010\004\004\005\005\010\007\001\002" +
    "\000\004\002\ufffd\001\002\000\014\002\uffff\004\010\005" +
    "\012\006\014\007\013\001\002\000\010\004\004\005\005" +
    "\010\007\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\004\003\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\010\001\001" +
    "\000\002\001\001\000\004\003\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\017\001\001\000\004\003" +
    "\020\001\001\000\002\001\001\000\004\005\022\001\001" +
    "\000\004\003\023\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JMParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JMParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JMParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Calculadora c = new Calculadora();

	public Calculadora getCalculadora() {
		return c;
	}

	public void setCalculadora(Calculadora _c) {
		c = _c;
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JMParser$actions {



    private Calculadora c = new Calculadora();

	public Calculadora getCalculadora() {
		return c;
	}

	public void setCalculadora(Calculadora _c) {
		c = _c;
	}


  private final JMParser parser;

  /** Constructor */
  CUP$JMParser$actions(JMParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JMParser$do_action(
    int                        CUP$JMParser$act_num,
    java_cup.runtime.lr_parser CUP$JMParser$parser,
    java.util.Stack            CUP$JMParser$stack,
    int                        CUP$JMParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JMParser$result;

      /* select the action based on the action number */
      switch (CUP$JMParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // opr ::= DIVIDE 
            {
              Object RESULT = null;
		
			parser.getCalculadora().addOperator(Calculadora.DIVIDE);
		
              CUP$JMParser$result = new java_cup.runtime.Symbol(3/*opr*/, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right, RESULT);
            }
          return CUP$JMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // opr ::= TIMES 
            {
              Object RESULT = null;
		
			parser.getCalculadora().addOperator(Calculadora.TIMES);
		
              CUP$JMParser$result = new java_cup.runtime.Symbol(3/*opr*/, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right, RESULT);
            }
          return CUP$JMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // opr ::= MINUS 
            {
              Object RESULT = null;
		
			parser.getCalculadora().addOperator(Calculadora.MINUS);
		
              CUP$JMParser$result = new java_cup.runtime.Symbol(3/*opr*/, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right, RESULT);
            }
          return CUP$JMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // opr ::= PLUS 
            {
              Object RESULT = null;
		
			parser.getCalculadora().addOperator(Calculadora.PLUS);
		
              CUP$JMParser$result = new java_cup.runtime.Symbol(3/*opr*/, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right, RESULT);
            }
          return CUP$JMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= INT opr expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$JMParser$stack.elementAt(CUP$JMParser$top-2)).value;
		 parser.getCalculadora().addOperand(e, true); 
              CUP$JMParser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right, RESULT);
            }
          return CUP$JMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= PLUS INT opr expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$JMParser$stack.elementAt(CUP$JMParser$top-2)).value;
		 parser.getCalculadora().addOperand(e, true); 
              CUP$JMParser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right, RESULT);
            }
          return CUP$JMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= MINUS INT opr expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$JMParser$stack.elementAt(CUP$JMParser$top-2)).value;
		 parser.getCalculadora().addOperand(e, false);
              CUP$JMParser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right, RESULT);
            }
          return CUP$JMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= MINUS INT 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).value;
		 parser.getCalculadora().addOperand(e, false);
              CUP$JMParser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right, RESULT);
            }
          return CUP$JMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= PLUS INT 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).value;
		 parser.getCalculadora().addOperand(e, true);	
              CUP$JMParser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right, RESULT);
            }
          return CUP$JMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JMParser$stack.elementAt(CUP$JMParser$top-1)).value;
		RESULT = start_val;
              CUP$JMParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$JMParser$parser.done_parsing();
          return CUP$JMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr ::= INT 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).value;
		 parser.getCalculadora().addOperand(e, true); 
              CUP$JMParser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JMParser$stack.elementAt(CUP$JMParser$top-0)).right, RESULT);
            }
          return CUP$JMParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

